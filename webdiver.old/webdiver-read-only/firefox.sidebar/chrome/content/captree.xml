<?xml version="1.0"?>

<bindings id="treeBindings"
   xmlns="http://www.mozilla.org/xbl"
   xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

  <binding id="mytree" extends="chrome://global/content/bindings/tree.xml#tree">
    <content>
      <children includes="treecols"/>
      <xul:stack flex="1">
        <xul:treerows class="tree-rows" flex="1">
          <children/>
        </xul:treerows>
      </xul:stack>
    </content>
    <implementation>
       <constructor>webdiverInit();</constructor>
       <destructor>webdiverDone();</destructor>
      <field name="itemid">5</field>
      <field name="rowid">5</field>
      <field name="treechildrenid">0</field>
      <field name="cnt">0</field>

      <method name="getparentid">
        <parameter name="tree"/>
        <parameter name="currentindex"/>
        <body>
        <![CDATA[
			var currentlevel = tree.treeBoxObject.view.getLevel(currentindex);
			var variantlevel = currentlevel
			if (currentlevel > 0)
			{
 				while (tree.treeBoxObject.view.getLevel(currentindex) == currentlevel && currentindex >= 0)
				{
					currentindex--;
				}
				if (tree.treeBoxObject.view.getLevel(currentindex)==currentlevel-1) 
					return tree.treeBoxObject.view.getItemAtIndex(currentindex).getAttribute("id");
			}
        ]]>
        </body>
      </method>

      <method name="CategoriesToPopup">
        <parameter name="tree"/>
        <parameter name="menuname"/>
        <body>
        <![CDATA[
			var index = 0;
			while (tree.treeBoxObject.view.getItemAtIndex(index)!=null)
			{
				var current = tree.treeBoxObject.view.getItemAtIndex(index);
				var parent_tree = current.parentNode;
				
				var parentid = this.getparentid(tree,index);
				if (parentid==null) parentid = "categorytreechildren";
				var parent_menu = document.getElementById(menuname + parentid);
			
				var cellcontent = tree.treeBoxObject.view.getCellText(index,'category');
										
				if (current.getAttribute("container","true"))
				{
					var menu = document.createElement("menu");
					menu.setAttribute("label",cellcontent);
			
					var mpopup = document.createElement("menupopup");
					mpopup.setAttribute("id", menuname + current.getAttribute("id"));
							
					menu.appendChild(mpopup);
					parent_menu.appendChild(menu);
				}
				else
				{
					var mi = document.createElement("menuitem");
                    mi.setAttribute("label",cellcontent);
                    parent_menu.appendChild(mi);
				}
				index++;
			}
        ]]>
        </body>
      </method>

      <method name="deleteCategoriesFromPopup">
        <parameter name="tree"/>
        <parameter name="menuname"/>
        <body>
        <![CDATA[
			var firstitem = document.getElementById(menuname + "categorytreechildren").firstChild;
			document.getElementById(menuname + "categorytreechildren").removeChild(firstitem);
			this.cnt = 0;
        ]]>
        </body>
      </method>

      <method name="BuildPopups">
        <body>
        <![CDATA[
			getthetree().deleteCategoriesFromPopup(getthetree(),'copyto_');
			getthetree().CategoriesToPopup(getthetree(),'copyto_');
        ]]>
        </body>
      </method>

      <method name="RenameCurrent">
        <parameter name="treename"/>
        <parameter name="cellname"/>
        <body>
        <![CDATA[
			var tree = document.getElementById(treename);
			var currentitem = tree.treeBoxObject.view.getItemAtIndex(tree.currentIndex);
			var currentlabel = tree.treeBoxObject.view.getCellText(tree.currentIndex,cellname);
			var newlabel = prompt("Please enter the new categoryname",currentlabel);

			if (newlabel!=false) {
				var currentcell = document.getElementById("cell-of-" + currentitem.getAttribute("id"));
				currentcell.setAttribute("label",newlabel);
			}
			this.BuildPopups();
        ]]>
        </body>
      </method>

      <method name="DeleteCurrent">
        <parameter name="treename"/>
        <body>
        <![CDATA[
			if (confirm("Are you sure you want to delete this category?")==true) {
				var tree = document.getElementById(treename);
				var currentelement = tree.treeBoxObject.view.getItemAtIndex(tree.currentIndex);
				currentelement.parentNode.removeChild(currentelement);
			}
        ]]>
        </body>
      </method>

      <method name="CreateSubTree">
        <parameter name="treeid"/>
        <parameter name="content"/>
        <body>
        <![CDATA[
			var tree = document.getElementById(treeid);
			var currentitem = tree.treeBoxObject.view.getItemAtIndex(tree.currentIndex);
			var currentid = tree.treeBoxObject.view.getItemAtIndex(tree.currentIndex).getAttribute("id");
			if (currentid != "") 
				content = prompt('Please enter a categoryname','undefined');
				var parentid = tree.treeBoxObject.view.getItemAtIndex(tree.currentIndex).parentNode.getAttribute("id");
				var parent = tree.treeBoxObject.view.getItemAtIndex(tree.currentIndex).parentNode;
				// create Treerow with id (rowid is a global variable so that we do not use the same id twice)
				var tr = document.createElement("treerow");
				tr.setAttribute("id", "treerow" + this.rowid);
				var tc = document.createElement("treecell");
				tc.setAttribute("label", content);
				tc.setAttribute("id","cell-of-treeitem" + this.itemid);
				tr.appendChild(tc);
				this.rowid++;
				// create treeitem with id (itemid is a global variable so that we do not use the same id twice)
				var ti = document.createElement("treeitem");
				ti.setAttribute("id", "treeitem" + this.itemid);
				ti.appendChild(tr);
				this.itemid++;
				// we distinguish the case that
				//		the container of the item is empty --> create new treechildren object and append item
				//		a treechildren-object already exists --> get the id and append new item to this one
				if (currentitem.getAttribute("container") != "true") {
					currentitem.setAttribute("container", "true");
					var tch = document.createElement("treechildren");
					tch.setAttribute("id", "treechildren" + this.treechildrenid);
					tch.appendChild(ti);
					this.treechildrenid++;
					currentitem.appendChild(tch);
				} else {
					var existingtreechildren = document.getElementById(currentitem.childNodes.item(0).getAttribute("id"));
					existingtreechildren.appendChild(ti);
				}
				// set open status of the item
				currentitem.setAttribute("open", "true");
			}
        ]]>
        </body>
      </method>

      <method name="topcategory">
        <parameter name="childrenobject"/>
        <parameter name="content"/>
        <body>
        <![CDATA[
			thetree = document.getElementById(childrenobject);
			var tr = document.createElement("treerow");
			tr.setAttribute("id", "treerow" + this.rowid);
			this.rowid++;
			var tc = document.createElement("treecell");
			tc.setAttribute("label", content);
			tc.setAttribute("id","cell-of-treeitem" + this.itemid);
			tr.appendChild(tc);
			this.rowid++;
			var ti = document.createElement("treeitem");
			ti.setAttribute("id", "treeitem" + this.itemid);
			ti.appendChild(tr);
			this.itemid++;
			thetree.appendChild(ti);
        ]]>
        </body>
      </method>

      <method name="Move">
        <parameter name="treename"/>
        <parameter name="direction"/>
        <parameter name="event"/>
        <body>
        <![CDATA[
			var tree = document.getElementById(treename);
			var idx = tree.currentIndex;
			var dir = 1;
			if (direction == "up") {
				dir = -1;
			}	
			var currentitem = tree.treeBoxObject.view.getItemAtIndex(idx);
			var previousitem = tree.treeBoxObject.view.getItemAtIndex(idx + dir);
			var parent = currentitem.parentNode;

			if (direction == "up") {
				if (previousitem.parentNode == currentitem.parentNode) {
					parent.insertBefore(currentitem, previousitem);
				} else {
					var tmp = previousitem.parentNode.parentNode;
					var ourobj = tmp;
					while (tmp.id != "outlineTree") {
						tmp = tmp.parentNode;
						if (currentitem.parentNode == tmp.parentNode) {
							ourobj = tmp;
						}
					}					
					parent.insertBefore(currentitem, ourobj);
				}
			} else {
				if (previousitem.parentNode == currentitem.parentNode) {
					parent.insertBefore(previousitem, currentitem);
				} else {
					var previousitem = tree.treeBoxObject.view.getItemAtIndex(idx + dir + 1);
					var i = 1;
					var ourobj;
					while (previousitem && ( previousitem.parentNode != currentitem.parentNode ) ) {
						i++;
						previousitem = tree.treeBoxObject.view.getItemAtIndex(idx + dir + i);	
					}
					if (previousitem) {
						parent.insertBefore(previousitem, currentitem);
					}
					
				}
			
			}
        ]]>
        </body>
      </method>

      <method name="getCellNodeAt">
        <parameter name="row"/>
        <parameter name="col"/>
        <body>
          var view;
          try {
            view = this.contentView;
          } catch (ex){}
          if (view){
            var elem = view.getItemAtIndex(row);
            if (elem){
              var pos = ((document.getElementById(col).ordinal - 1) >> 1);
              return elem.firstChild.childNodes[pos];
            }
          }
          return null;
        </body>
      </method>

    </implementation>
    <handlers>
      <handler event="dblclick" button="0">
        var treeBox = this.treeBoxObject;
        var row = {};
        var col = {};
        var obj = {};
        treeBox.getCellAt(event.clientX,event.clientY,row,col,obj);
        var colid;
        if (typeof col.value == "object") { // FireFox 1.5
           colid = col.value.id;
        } else { // FireFox 1.0
           colid = col.value;
        }
			var cellnode = this.getCellNodeAt(row.value, colid);
			if (cellnode.parentNode.parentNode.getAttribute("open") == "true") {
				cellnode.parentNode.parentNode.setAttribute("open", false);
			} else {
				cellnode.parentNode.parentNode.setAttribute("open", true);
			}
			document.getElementById("myout").value = cellnode.id + " -- open=" + cellnode.parentNode.parentNode.getAttribute("open");
      </handler>
    </handlers>
  </binding>
</bindings>

